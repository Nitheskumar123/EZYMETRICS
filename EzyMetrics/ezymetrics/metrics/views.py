from django.shortcuts import render
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from django.http import HttpResponse
from reportlab.lib.colors import HexColor
from rest_framework import generics
from .models import Lead
from .models import Campaign
from .serializers import LeadSerializer 
from .serializers import CampaignSerializer
import csv
from datetime import datetime
class leadlistcreate(generics.ListCreateAPIView):
    queryset = Lead.objects.all()
    serializer_class = LeadSerializer

class leadretrieveupdatedestroy(generics.RetrieveUpdateDestroyAPIView):
    queryset = Lead.objects.all()
    serializer_class = LeadSerializer

class campaignlistcreate(generics.ListCreateAPIView):
    queryset = Campaign.objects.all()
    serializer_class = CampaignSerializer

class campaignretrieveupdatedestroy(generics.RetrieveUpdateDestroyAPIView):
    queryset = Campaign.objects.all()
    serializer_class = CampaignSerializer

def generate_report(request):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="ezymetrics_report.pdf"'
    p = canvas.Canvas(response, pagesize=letter)
    width, height = letter
    p.setFillColor(HexColor('#0066CC'))
    p.setFont("Helvetica-Bold", 24)
    p.drawString(50, height - 100, "CRM Analytics Report")
    p.setFillColor(HexColor('#333333'))
    p.setFont("Helvetica-Bold", 18)
    p.drawString(50, height - 150, "Leads Overview")
    p.setFont("Helvetica", 12)
    leads = Lead.objects.all()
    y = height - 180
    for lead in leads:
        p.drawString(50, y, f"{lead.name}")
        p.drawString(200, y, f"ID: {lead.lead_id}")
        p.drawString(300, y, lead.email)
        p.drawString(450, y, lead.source)
        p.line(50, y - 5, width - 50, y - 5)
        y -= 25
    p.setFillColor(HexColor('#0066CC'))
    p.setFont("Helvetica-Bold", 18)
    p.drawString(50, y - 20, "Campaign Performance")
    
    p.setFillColor(HexColor('#333333'))
    p.setFont("Helvetica", 12)
    y -= 50
    campaigns = Campaign.objects.all()
    for campaign in campaigns:
        p.drawString(50, y, campaign.name)
        p.drawString(200, y, f"ID: {campaign.campaign_id}")
        p.drawString(350, y, f"Budget: ${campaign.budget:,.2f}")
        p.line(50, y - 5, width - 50, y - 5)
        y -= 25
    p.setFillColor(HexColor('#666666'))
    p.setFont("Helvetica-Oblique", 10)
    p.drawString(50, 30, "Generated by EzyMetrics Analytics Platform")
    p.drawString(width - 200, 30, "page 1-1")
    
    p.showPage()
    p.save()
    return response
import csv
from django.http import HttpResponse
from .models import Campaign

def generate_csv(request):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="campaign_data.csv"'

    writer = csv.writer(response)
    writer.writerow(['Campaign Name', 'Leads Generated'])

    # Query the campaigns
    campaigns = Campaign.objects.all()

    for campaign in campaigns:
        if hasattr(campaign, 'leads_generated'):
            writer.writerow([campaign.name, campaign.leads_generated])

    return response
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .utils import send_alert_email
from .models import Lead

@api_view(['GET'])
def some_view(request):
    required_phone_length = 10
    leads = Lead.objects.all()
    for lead in leads:
        if lead.phone_number and len(lead.phone_number) < required_phone_length:
            
            send_alert_email(
                subject="Alert: Phone Number Length Too Short",
                message=f"Lead {lead.name} (ID: {lead.lead_id}) has a phone number with fewer than {required_phone_length} digits."
            )

    return Response({"status": "Checked phone numbers for all leads"})